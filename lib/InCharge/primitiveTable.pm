#*
#* Copyright (c) 2003 System Management ARTS (SMARTS)
#* All Rights Reserved.
#*
# Auto-generated - Thu Mar 27 22:29:32 2008
# Do not edit this file

package InCharge::remote;
#-------------------------------------------------------------------
# primitiveTable lists the InCharge server command codes, the command
# arguments (request fields) and response values (reply fields).
#
# Command Name =	Name of SMARTS Remote API command exported
# code =		SMARTS Remote API protocol command code number
# args =		Types of arguments need by the command
# returns =		List of return values (can be more than one)
# Cache? =		Whether or not to cache the results in memory
# Version =             Which InCharge version the call was introduced in
#                         = (major * 10000) + (minor * 100) + revision
#
#	Command name			code	args	returns	Cache? Version
#	----------------		----	-----	-------	------ -------
our %primitiveTable = (
	classExists                    => [   9,   "S",     "B",     1,     0 ],
	consistencyUpdate              => [   5,   "",      "",      0,     0 ],
	contains                       => [ 144,   "OS#",   "B",     0, 60000 ],
	containsf                      => [ 145,   "OS#I",  "B",     0, 60000 ],
	correlate                      => [ 119,   "",      "",      0, 10500 ],
	countChildren                  => [  43,   "S",     "I",     0,     0 ],
	countClassInstances            => [  44,   "S",     "I",     0,     0 ],
	countClasses                   => [   6,   "",      "I",     1,     0 ],
	countElements                  => [  78,   "OS",    "I",     0,     0 ],
	countInstances                 => [   7,   "",      "I",     0,     0 ],
	countLeafInstances             => [  45,   "S",     "I",     0,     0 ],
	countf                         => [  77,   "OSI",   "I",     0,     0 ],
	createInstance                 => [  70,   "J",     "",      0,     0 ],
	deleteInstance                 => [  71,   "O",     "",      0,     0 ],
	deleteObserver                 => [ 102,   "",      "",      0,     0 ],
	executeProgram                 => [  21,   "S[S",   "T",     0,     0 ],
	findInstances_P                => [ 134,   "SSi",   "[O",    0, 40000 ],
	forceNotify                    => [  16,   "EN",    "",      0,     0 ],
	get                            => [  72,   "OS",    "*",     0,     0 ],
	get_t                          => [  72,   "OS",    "#",     0,     0 ],
	getAggregationEvents           => [ 127,   "EB",    "[E",    0, 20100 ],
	getAllEventNames               => [  35,   "S",     "[S",    1,     0 ],
	getAllInstances                => [  47,   "",      "[S",    0,     0 ],
	getAllProperties               => [ 138,   "Oi",    "[p",    0, 50100 ],
	getAllProperties_t             => [ 138,   "Oi",    "[P",    0, 50100 ],
	getArgDirection                => [  69,   "SSS",   "I",     1,     0 ],
	getArgType                     => [  68,   "SSS",   "I",     1,     0 ],
	getAttributeNames              => [  36,   "S",     "[S",    1,     0 ],
	getAttributeTypes              => [  37,   "S",     "[I",    1,     0 ],
	getByKey                       => [  79,   "OS#",   "*",     0,     0 ],
	getByKey_t                     => [  79,   "OS#",   "#",     0,     0 ],
	getByKeyf                      => [  80,   "OS#I",  "*",     0,     0 ],
	getByKeyf_t                    => [  80,   "OS#I",  "#",     0,     0 ],
	getChildren                    => [  46,   "S",     "[S",    1,     0 ],
	getClassDescription            => [ 129,   "S",     "S",     1, 30000 ],
	getClassHierarchy              => [ 140,   "",      "[h",    0, 50100 ],
	getClassInstances              => [  48,   "S",     "[S",    0,     0 ],
	getClasses                     => [   8,   "",      "[S",    1,     0 ],
	getCorrelationParameters       => [ 107,   "",      "C",     0, 10500 ],
	getEnumVals                    => [ 130,   "SS",    "[S",    1, 30000 ],
	getEventCauses                 => [  15,   "EB",    "[Y",    0,     0 ],
	getEventClassName              => [  59,   "SS",    "S",     0,     0 ],
	getEventDescription            => [  60,   "SS",    "S",     1,     0 ],
	getEventExplainedBy            => [ 133,   "EB",    "[Y",    0, 30100 ],
	getEventExported               => [  62,   "SS",    "B",     1,     0 ],
	getEventNames                  => [  41,   "S",     "[S",    1,     0 ],
	getEventSymptoms               => [  63,   "SS",    "[S",    0,     0 ],
	getEventType_P                 => [  61,   "SS",    "I",     1,     0 ],
	getInstrumentationType         => [ 122,   "O",     "S",     0, 10500 ],
	getLeafInstances               => [  49,   "S",     "[S",    0,     0 ],
	getLibraries                   => [  17,   "",      "[S",    1,     0 ],
	getMultipleProperties          => [ 141,   "O[S",   "[*",    0, 50100 ],
	getMultipleProperties_t        => [ 141,   "O[S",   "[#",    0, 50100 ],
	getObserverId                  => [   2,   "",      "S",     0,     0 ],
	getOpArgs                      => [  67,   "SS",    "[S",    1,     0 ],
	getOpDescription               => [  65,   "SS",    "S",     1,     0 ],
	getOpFlag                      => [  66,   "SS",    "I",     1,     0 ],
	getOpNames                     => [  40,   "S",     "[S",    1,     0 ],
	getOpReturnType                => [  64,   "SS",    "I",     1,     0 ],
	getParentClass                 => [  33,   "S",     "S",     1,     0 ],
	getProblemClosure              => [  14,   "EB",    "[Y",    0,     0 ],
	getProblemExplanation          => [ 132,   "EB",    "[Y",    0, 30000 ],
	getProblemNames                => [  42,   "S",     "[S",    0,     0 ],
	getProblemSymptomState         => [ 143,   "E",     "[s",    0, 50100 ],
	getPrograms                    => [  18,   "",      "[S",    0,     0 ],
	getPropAccess                  => [  52,   "SS",    "I",     1,     0 ],
	getPropDescription             => [  53,   "SS",    "S",     1,     0 ],
	getPropIsReadonly              => [  54,   "SS",    "B",     1,     0 ],
	getPropIsRelationship          => [  56,   "SS",    "B",     1,     0 ],
	getPropIsRequired              => [  55,   "SS",    "B",     1,     0 ],
	getPropNames                   => [  34,   "S",     "[S",    1,     0 ],
	getPropRange                   => [ 131,   "SS",    "*",     1, 30000 ],
	getPropRange_t                 => [ 131,   "SS",    "#",     1, 30000 ],
	getPropType                    => [  51,   "SS",    "I",     1,     0 ],
	getPropertySubscriptionState   => [ 137,   "OS",    "I",     0, 50000 ],
	getRelatedClass                => [  58,   "SS",    "S",     1,     0 ],
	getRelationNames               => [  38,   "S",     "[S",    1,     0 ],
	getRelationTypes               => [  39,   "S",     "[I",    1,     0 ],
	getReverseRelation             => [  57,   "SS",    "S",     1,     0 ],
	getSubscriptionState           => [ 128,   "E",     "I",     0, 30000 ],
	getThreads                     => [  20,   "",      "[T",    0,     0 ],
	getf                           => [  73,   "OSI",   "*",     0,     0 ],
	getf_t                         => [  73,   "OSI",   "#",     0,     0 ],
	getfAllProperties              => [ 139,   "OiI",   "[p",    0, 50100 ],
	getfAllProperties_t            => [ 139,   "OiI",   "[P",    0, 50100 ],
	getfMultipleProperties         => [ 142,   "O[SI",  "[*",    0, 50100 ],
	getfMultipleProperties_t       => [ 142,   "O[SI",  "[#",    0, 50100 ],
	hasRequiredProps               => [  50,   "S",     "B",     0,     0 ],
	insertElement_P                => [  75,   "OS#",   "",      0,     0 ],
	instanceExists                 => [  10,   "J",     "B",     0,     0 ],
	invokeOperation                => [  92,   "OS[#",  "*",     0,     0 ],
	invokeOperation_t              => [  92,   "OS[#",  "#",     0,     0 ],
	isAbstract                     => [  30,   "S",     "B",     1, 10500 ],
	isBaseOf                       => [  31,   "SS",    "B",     1,     0 ],
	isBaseOfOrProxy                => [  32,   "SS",    "B",     1,     0 ],
	isInstrumented                 => [ 123,   "S",     "B",     1, 10500 ],
	isMember                       => [  90,   "OSO",   "B",     0,     0 ],
	isMemberByKey                  => [  81,   "OS#",   "B",     0,     0 ],
	isMemberByKeyf                 => [  82,   "OS#I",  "B",     0,     0 ],
	isMemberf                      => [  91,   "OSOI",  "B",     0,     0 ],
	isSubscribed                   => [ 101,   "E",     "B",     0,     0 ],
	loadLibrary                    => [  24,   "S",     "",      0,     0 ],
	loadProgram                    => [  23,   "S",     "",      0,     0 ],
	noop                           => [   0,   "",      "",      0,     0 ],
	notify                         => [ 104,   "EN",    "",      0,     0 ],
	propertySubscribe              => [  95,   "OSI",   "",      0,     0 ],
	propertySubscribeAll           => [ 135,   "eI",    "",      0, 50000 ],
	propertyUnsubscribe            => [  96,   "OS",    "",      0,     0 ],
	propertyUnsubscribeAll         => [ 136,   "e",     "",      0, 50000 ],
	put_P                          => [  74,   "OS#",   "",      0,     0 ],
	quit                           => [   1,   "",      "",      0,     0 ],
	removeElementByKey             => [  83,   "OS#",   "",      0,     0 ],
	removeElement_P                => [  76,   "OS#",   "",      0,     0 ],
	restoreRepository              => [  29,   "SB",    "",      0,     0 ],
	setCorrelationParameters       => [ 108,   "C",     "",      0, 10500 ],
	storeAllRepository             => [  27,   "S",     "",      0,     0 ],
	storeClassRepository           => [  28,   "SS",    "",      0,     0 ],
	subscribeAll                   => [  98,   "e",     "",      0,     0 ],
	subscribeEvent                 => [  97,   "E",     "",      0,     0 ],
	topologySubscribe              => [  93,   "",      "",      0,     0 ],
	topologyUnsubscribe            => [  94,   "",      "",      0,     0 ],
	transactionAbort               => [ 125,   "",      "",      0, 20000 ],
	transactionCommit              => [ 126,   "",      "",      0, 20000 ],
	transactionStart               => [ 124,   "I",     "",      0, 20000 ],
	unsubscribeAll                 => [ 100,   "e",     "",      0,     0 ],
	unsubscribeEvent               => [  99,   "E",     "",      0,     0 ],
);
1;
