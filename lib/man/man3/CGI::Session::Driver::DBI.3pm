.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::Session::Driver::DBI 3"
.TH CGI::Session::Driver::DBI 3 "2011-07-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
CGI::Session::Driver::DBI \- Base class for native DBI\-related CGI::Session drivers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    require CGI::Session::Driver::DBI;
\&    @ISA = qw( CGI::Session::Driver::DBI );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In most cases you can create a new DBI-driven CGI::Session driver by simply creating an empty driver file that inherits from CGI::Session::Driver::DBI. That's exactly what sqlite does. The only reason why this class doesn't suit for a valid driver is its name isn't in lowercase. I'm serious!
.Sh "\s-1NOTES\s0"
.IX Subsection "NOTES"
CGI::Session::Driver::DBI defines \fIinit()\fR method, which makes \s-1DBI\s0 handle available for drivers in \fIHandle\fR \- object attribute regardless of what \f(CW\*(C`\e%dsn_args\*(C'\fR were used in creating session object. Should your driver require non-standard initialization you have to re-define \fIinit()\fR method in your \fI.pm\fR file, but make sure to set 'Handle' \- object attribute to database handle (returned by \s-1DBI\-\s0>connect(...)) if you wish to inherit any of the methods from CGI::Session::Driver::DBI.
.SH "STORAGE"
.IX Header "STORAGE"
Before you can use any DBI-based session drivers you need to make sure compatible database table is created for CGI::Session to work with. Following command will produce minimal requirements in most \s-1SQL\s0 databases:
.PP
.Vb 4
\&    CREATE TABLE sessions (
\&        id CHAR(32) NOT NULL PRIMARY KEY,
\&        a_session TEXT NOT NULL
\&    );
.Ve
.PP
Your session table can define additional columns, but the above two are required. Name of the session table is expected to be \fIsessions\fR by default. You may use a different name if you wish. To do this you have to pass \fITableName\fR as part of your \f(CW\*(C` \e%dsn_args \*(C'\fR:
.PP
.Vb 6
\&    $s = CGI::Session->new('driver:sqlite', undef, {TableName=>'my_sessions'});
\&    $s = CGI::Session->new('driver:mysql', undef,
\&    {
\&        TableName=>'my_sessions',
\&        DataSource=>'dbi:mysql:shopping_cart'.
\&    });
.Ve
.PP
To use different column names, change the 'create table' statement, and then simply do this:
.PP
.Vb 7
\&    $s = CGI::Session->new('driver:pg', undef,
\&    {
\&        TableName=>'session',
\&        IdColName=>'my_id',
\&        DataColName=>'my_data',
\&        DataSource=>'dbi:pg:dbname=project',
\&    });
.Ve
.PP
or
.PP
.Vb 7
\&    $s = CGI::Session->new('driver:pg', undef,
\&    {
\&        TableName=>'session',
\&        IdColName=>'my_id',
\&        DataColName=>'my_data',
\&        Handle=>$dbh,
\&    });
.Ve
.SH "DRIVER ARGUMENTS"
.IX Header "DRIVER ARGUMENTS"
Following driver arguments are supported:
.IP "DataSource" 4
.IX Item "DataSource"
First argument to be passed to \s-1DBI\s0\->\fIconnect()\fR. If the driver makes
the database connection itself, it will also explicitly disconnect from the database when 
the driver object is DESTROYed.
.IP "User" 4
.IX Item "User"
User privileged to connect to the database defined in \f(CW\*(C`DataSource\*(C'\fR.
.IP "Password" 4
.IX Item "Password"
Password of the \fIUser\fR privileged to connect to the database defined in \f(CW\*(C`DataSource\*(C'\fR
.IP "Handle" 4
.IX Item "Handle"
An existing \s-1DBI\s0 database handle object. The handle can be created on demand
by providing a code reference as a argument, such as \f(CW\*(C`<sub{DBI\-\*(C'\fRconnect}>>.
This way, the database connection is only created if it actually needed. This can be useful
when combined with a framework plugin like CGI::Application::Plugin::Session, which creates
a CGI::Session object on demand as well. 
.Sp
\&\f(CW\*(C`Handle\*(C'\fR will override all the above arguments, if any present.
.IP "TableName" 4
.IX Item "TableName"
Name of the table session data will be stored in.
.SH "LICENSING"
.IX Header "LICENSING"
For support and licensing information see CGI::Session
