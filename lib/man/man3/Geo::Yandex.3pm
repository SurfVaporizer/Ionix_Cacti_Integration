.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Geo::Yandex 3"
.TH Geo::Yandex 3 "2008-11-14" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Geo::Yandex \- Performs geographical queries using Yandex Maps API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Geo::Yandex;
.Ve
.PP
.Vb 2
\&    # Address to search
\&    my $addr = 'Москва, Красная площадь, 1';
.Ve
.PP
.Vb 2
\&    # Personal API key, should be obtained at http://api.yandex.ru/maps/form.xml
\&    my $key = '. . .';
.Ve
.PP
.Vb 2
\&    # New geo object, note to use the key
\&    my $geo = new Geo::Yandex($key);
.Ve
.PP
.Vb 2
\&    # Search locations with a given address
\&    my @locations = $geo->location(address => $addr);
.Ve
.PP
.Vb 8
\&    # Or specify query in more details
\&    my @locations = $geo->location(
\&        address => $addr,
\&        results => 3,
\&        skip    => 2,
\&        center  => '37.618920,55.756994',
\&        size    => '0.552069,0.400552'
\&    );
.Ve
.PP
.Vb 5
\&    # Locations are an array of Geo::Yandex::Location elements
\&    for my $item (@locations) {
\&        say $item->address . ' (' . $item->kind .') ' .
\&            $item->latitude . ',' . $item->longitude;
\&    }
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Geo::Yandex is a Perl interface for the part of Yandex Maps \s-1API\s0 which retrieves geographical data for text query.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Yandex Maps \s-1API\s0 is a set of tools for working with http://maps.yandex.ru website both with JavaScript queries and \s-1HTTP\s0 negotiations. Full description of the interface can be found at http://api.yandex.ru/maps/doc/ (in Russian).
.PP
All the work is done by an instance of Geo::Yandex class.
.Sh "new"
.IX Subsection "new"
Creates a new Geo::Yandex object. The only argument, which is required, is a personal key that should be issued by Yandex before using \s-1API\s0. To obtain the key you need to fill the form at http://api.yandex.ru/maps/form.xml.
.PP
.Vb 1
\&    my $geo = new Geo::Yandex($key);
.Ve
.Sh "location"
.IX Subsection "location"
Launches search query to Yandex and returns the list of locations which match to the given address (passed in \f(CW\*(C`address\*(C'\fR parameter).
.PP
.Vb 1
\&    my @locations = $geo->location(address => $addr);
.Ve
.PP
The list returned by this method is combined of elements of the type Geo::Yandex::Location. If no results were found, return is an empty list.
.Sh "parameters of location method"
.IX Subsection "parameters of location method"
\fIaddress\fR
.IX Subsection "address"
.PP
This is the only parameter which is requered for performing the search. It is a text string containing the address of the location being searched. May be in less or more free form.
.PP
\fIresults\fR
.IX Subsection "results"
.PP
Optional parameter which sets the limit of search. No more results will appear than a number set by this parameter.
.PP
\fIskip\fR
.IX Subsection "skip"
.PP
Optional parameter to skip several first results. Useful in pair with \f(CW\*(C`results\*(C'\fR parameter for organizing paginated output.
.PP
\fIcenter, size\fR
.IX Subsection "center, size"
.PP
.Vb 5
\&    my @locations = $geo->location(
\&        address => $addr,
\&        center  => '37.618920,55.756994',
\&        size    => '0.552069,0.400552'
\&    );
.Ve
.PP
These two parameters restrict the search area with a boundary located withing (longitude, latitude) pair set in \f(CW\*(C`center\*(C'\fR. This point will be located in the center of search area. To set width and height of the search block use \f(CW\*(C`size\*(C'\fR parameter. Both parameters are optional. Each should contain a pair of numbers (geographical measure \- degree) separated by a comma.
.PP
Please note that you should not expect that \f(CW\*(C`center\*(C'\fR and \f(CW\*(C`size\*(C'\fR parameters will bring rigid boundaries of the area; those are just hints for the search engine. Seems to be weird stuff.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Shitov, <andy@shitov.ru>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
Geo::Yandex module is a free software.
You may redistribute and (or) modify it under the same terms as Perl, whichever version it is.
